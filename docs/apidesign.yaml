openapi: 3.1.0
info:
  title: Student Chat + Ingestion API
  version: "1.0.0"
  description: >
    FastAPI back-end for a student chat system routed through A2A servers and a teacher-facing ingestion UI.
    Students chat -> Back-end -> A2A Client -> Selected A2A Server -> Vector Store (subject collection).
    Teachers upload PDFs to S3 and trigger ingestion to populate subject-specific vector collections.

servers:
  - url: https://api.example.com/api/v1
    description: Prod
  - url: http://localhost:8000/api/v1
    description: Local

tags:
  - name: Meta
  - name: Auth
  - name: Subjects
  - name: Documents
  - name: Ingestion
  - name: Chat
  - name: Routing
  - name: A2A
  - name: Webhooks

paths:
  /healthz:
    get:
      tags: [Meta]
      summary: Liveness probe
      responses:
        "200": { description: OK }

  /readyz:
    get:
      tags: [Meta]
      summary: Readiness probe
      responses:
        "200": { description: Ready }

  /me:
    get:
      tags: [Auth]
      summary: Get current user and roles
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Current user
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }

  /subjects:
    get:
      tags: [Subjects]
      summary: List subjects visible to caller
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Subjects
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Subject" }
    post:
      tags: [Subjects]
      summary: Create subject (admin/teacher)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/SubjectCreate" }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Subject" }

  /subjects/{subjectSlug}:
    parameters:
      - in: path
        name: subjectSlug
        required: true
        schema: { type: string }
        description: Subject slug (e.g., "math")
    get:
      tags: [Subjects]
      summary: Get subject details
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Subject
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Subject" }
    patch:
      tags: [Subjects]
      summary: Update subject (admin/teacher)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/SubjectUpdate" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Subject" }
    delete:
      tags: [Subjects]
      summary: Delete subject (admin)
      security: [{ bearerAuth: [] }]
      responses:
        "204": { description: Deleted }

  /subjects/{subjectSlug}/documents:
    get:
      tags: [Documents]
      summary: List documents for subject (with ingest status)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: status
          schema: { type: string, enum: [uploaded, ingested, failed] }
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: page_size
          schema: { type: integer, minimum: 1, maximum: 200, default: 25 }
      responses:
        "200":
          description: Documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: "#/components/schemas/Document" }
                  total: { type: integer }

  /subjects/{subjectSlug}/uploads/presign:
    post:
      tags: [Documents]
      summary: Get S3 presigned URLs for direct upload
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UploadRequest" }
      responses:
        "200":
          description: Presigned uploads
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UploadPresignResponse" }

  /subjects/{subjectSlug}/uploads/complete:
    post:
      tags: [Documents]
      summary: Confirm completed uploads (persist metadata)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UploadCompleteRequest" }
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  doc_ids:
                    type: array
                    items: { type: string }

  /subjects/{subjectSlug}/documents/{docId}:
    parameters:
      - in: path
        name: docId
        required: true
        schema: { type: string }
    get:
      tags: [Documents]
      summary: Get document metadata
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Document
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Document" }
    delete:
      tags: [Documents]
      summary: Delete document from S3 and purge vectors
      security: [{ bearerAuth: [] }]
      responses:
        "204": { description: Deleted }

  /subjects/{subjectSlug}/ingestions:
    post:
      tags: [Ingestion]
      summary: Start an ingestion job for this subject
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/IngestionRequest" }
      responses:
        "202":
          description: Job created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/IngestionJob" }
    get:
      tags: [Ingestion]
      summary: List ingestion jobs for subject
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Jobs
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/IngestionJob" }

  /ingestions/{jobId}:
    parameters:
      - in: path
        name: jobId
        required: true
        schema: { type: string }
    get:
      tags: [Ingestion]
      summary: Get ingestion job status
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Job
          content:
            application/json:
              schema: { $ref: "#/components/schemas/IngestionJob" }

  /ingestions/{jobId}/cancel:
    post:
      tags: [Ingestion]
      summary: Cancel ingestion job (best effort)
      security: [{ bearerAuth: [] }]
      responses:
        "202": { description: Cancel requested }

  /conversations:
    post:
      tags: [Chat]
      summary: Create a new conversation
      security: [{ bearerAuth: [] }]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                subject_hint: { type: string, nullable: true }
                title: { type: string, nullable: true }
      responses:
        "201":
          description: Conversation created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Conversation" }
    get:
      tags: [Chat]
      summary: List my conversations
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Conversations
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Conversation" }

  /conversations/{conversationId}:
    parameters:
      - in: path
        name: conversationId
        required: true
        schema: { type: string }
    get:
      tags: [Chat]
      summary: Get conversation
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Conversation
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Conversation" }
    delete:
      tags: [Chat]
      summary: Delete conversation
      security: [{ bearerAuth: [] }]
      responses:
        "204": { description: Deleted }

  /conversations/{conversationId}/messages:
    post:
      tags: [Chat]
      summary: Send a message (non-streaming)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/MessageCreate" }
      responses:
        "201":
          description: Assistant reply
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Message" }
    get:
      tags: [Chat]
      summary: List messages (history)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: page_size
          schema: { type: integer, minimum: 1, maximum: 200, default: 50 }
      responses:
        "200":
          description: Messages
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Message" }

  /conversations/{conversationId}/messages/stream:
    post:
      tags: [Chat]
      summary: Send a message and stream the assistant response (SSE)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/MessageCreate" }
      responses:
        "200":
          description: SSE stream of chunks
          content:
            text/event-stream:
              schema: { $ref: "#/components/schemas/SSEChunk" }

  /routing/policy:
    get:
      tags: [Routing]
      summary: Get current routing policy (admin)
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Policy
          content:
            application/json:
              schema: { $ref: "#/components/schemas/RoutingPolicy" }
    patch:
      tags: [Routing]
      summary: Update routing policy (admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/RoutingPolicyUpdate" }
      responses:
        "200":
          description: Updated policy
          content:
            application/json:
              schema: { $ref: "#/components/schemas/RoutingPolicy" }

  /a2a/servers:
    get:
      tags: [A2A]
      summary: List registered A2A servers (admin)
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: A2A servers
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/A2AServer" }
    post:
      tags: [A2A]
      summary: Register a new A2A server (admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/A2AServerCreate" }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/A2AServer" }

  /a2a/servers/{serverId}/health:
    parameters:
      - in: path
        name: serverId
        required: true
        schema: { type: string }
    get:
      tags: [A2A]
      summary: A2A server health
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Health
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: ok }
                  latency_ms: { type: number }

  /webhooks/s3:
    post:
      tags: [Webhooks]
      summary: Receive S3 object-created notifications (optional)
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object, additionalProperties: true }
      responses:
        "204": { description: Received }

  /webhooks/a2a/{serverId}/callback:
    parameters:
      - in: path
        name: serverId
        required: true
        schema: { type: string }
    post:
      tags: [Webhooks]
      summary: Callback endpoint for long-running A2A ops (optional)
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object, additionalProperties: true }
      responses:
        "204": { description: Received }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id: { type: string }
        email: { type: string, format: email }
        roles:
          type: array
          items: { type: string, enum: [student, teacher, admin] }

    Subject:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        slug: { type: string }
        s3_bucket: { type: string }
        s3_prefix: { type: string }
        vector_collection: { type: string }
        a2a_server_id: { type: string }
        stats:
          type: object
          properties:
            documents: { type: integer }
            vectors: { type: integer }

    SubjectCreate:
      type: object
      required: [name, slug, s3_bucket, s3_prefix, vector_collection, a2a_server_id]
      properties:
        name: { type: string }
        slug: { type: string }
        s3_bucket: { type: string }
        s3_prefix: { type: string }
        vector_collection: { type: string }
        a2a_server_id: { type: string }

    SubjectUpdate:
      type: object
      properties:
        name: { type: string }
        s3_bucket: { type: string }
        s3_prefix: { type: string }
        vector_collection: { type: string }
        a2a_server_id: { type: string }

    Document:
      type: object
      properties:
        id: { type: string }
        subject_slug: { type: string }
        filename: { type: string }
        s3_key: { type: string }
        mime: { type: string }
        size: { type: integer }
        status: { type: string, enum: [uploaded, ingested, failed] }
        created_at: { type: string, format: date-time }

    UploadRequest:
      type: object
      required: [files]
      properties:
        files:
          type: array
          items:
            type: object
            required: [filename, mime, size]
            properties:
              filename: { type: string }
              mime: { type: string }
              size: { type: integer }

    UploadPresignResponse:
      type: object
      properties:
        uploads:
          type: array
          items:
            type: object
            properties:
              doc_id: { type: string }
              s3_key: { type: string }
              url: { type: string, format: uri }
              fields: { type: object, additionalProperties: true }

    UploadCompleteRequest:
      type: object
      required: [doc_ids]
      properties:
        doc_ids:
          type: array
          items: { type: string }

    IngestionRequest:
      type: object
      properties:
        mode: { type: string, enum: [new, selected], default: new }
        doc_ids:
          type: array
          items: { type: string }
        options:
          type: object
          properties:
            chunk_size: { type: integer, default: 1000 }
            chunk_overlap: { type: integer, default: 150 }
            embed_model: { type: string, default: text-embedding-3-large }
            append: { type: boolean, default: true }

    IngestionJob:
      type: object
      properties:
        job_id: { type: string }
        subject_slug: { type: string }
        status: { type: string, enum: [queued, running, succeeded, failed, canceled] }
        docs_total: { type: integer }
        docs_done: { type: integer }
        vectors: { type: integer }
        logs_url: { type: string, nullable: true }

    Conversation:
      type: object
      properties:
        id: { type: string }
        title: { type: string, nullable: true }
        subject_hint: { type: string, nullable: true }
        created_at: { type: string, format: date-time }

    MessageCreate:
      type: object
      required: [content]
      properties:
        role: { type: string, enum: [user], default: user }
        content: { type: string }
        subject_hint: { type: string, nullable: true }

    Message:
      type: object
      properties:
        id: { type: string }
        conversation_id: { type: string }
        role: { type: string, enum: [user, assistant] }
        content: { type: string }
        routed_to: { type: string, description: "A2A server id" }
        subject: { type: string, nullable: true }
        citations:
          type: array
          items: { $ref: "#/components/schemas/Citation" }
        created_at: { type: string, format: date-time }

    Citation:
      type: object
      properties:
        title: { type: string }
        url: { type: string, format: uri }
        score: { type: number }
        doc_id: { type: string, nullable: true }

    SSEChunk:
      type: object
      properties:
        delta: { type: string, description: "Partial text token(s)" }
        finish: { type: boolean, default: false }
        routed_to: { type: string }
        subject: { type: string, nullable: true }
        citations:
          type: array
          items: { $ref: "#/components/schemas/Citation" }
        message_id: { type: string, nullable: true }

    A2AServer:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        base_url: { type: string, format: uri }
        health: { type: string, example: ok }
        supports:
          type: array
          items: { type: string }

    A2AServerCreate:
      type: object
      required: [id, name, base_url]
      properties:
        id: { type: string }
        name: { type: string }
        base_url: { type: string, format: uri }
        supports:
          type: array
          items: { type: string }

    RoutingPolicy:
      type: object
      properties:
        default_server_id: { type: string }
        bindings:
          type: object
          additionalProperties: { type: string } # subject -> serverId
        thresholds:
          type: object
          properties:
            confidence_min: { type: number, default: 0.5 }

    RoutingPolicyUpdate:
      type: object
      properties:
        default_server_id: { type: string }
        bindings:
          type: object
          additionalProperties: { type: string }
        thresholds:
          type: object
          properties:
            confidence_min: { type: number }
